#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('05-01:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//-------------------------------------
// Socket通信
//-------------------------------------
const fs = require('fs');
const io = require('socket.io').listen(server);
io.sockets.on('connection', (socket) => {

  console.log('サーバーと接続したよ！');

  let data = {msg: `${socket.id}さんが接続しました`}
  // connected イベントでメッセージ送信
  socket.emit('connected', data);

  // クライアントからメッセージ受信
  socket.on('clientToServer', (txt, name) => {
    // サーバーから返すメッセージを作成
    let date = new Date();
    let hour = date.getHours();
    let min = date.getMinutes();
    let msg = { 
      hour: hour,
      min: min,
      name: name,
      txt: txt
    }
    // クライアントにメッセージの送信
    socket.emit('serverToClient', msg);
    socket.broadcast.emit('serverToClient', msg);
  });

  //-------------------------------
  // 画像アップロード処理
  //-------------------------------
  socket.on('clientToServerImg', (data) => {
    // 保存するファイルのファイル名を作成
    let date = new Date();
    let fileName = date.getTime();
    let path = `images/${fileName}.jpg`;

    // ファイルを保存する
    const writeStream = fs.createWriteStream(`./public/${path}`);
    writeStream.write(data.contents, 'binary', (err) => {
      if(err){
        return;
      }
      // 完了イベントの発火
      writeStream.end();
    });

    // 書き込み完了イベント
    writeStream.on('finish', () => {
      console.log('finish');
      //-------------------------------------
      // クライアントにファイルパスを送信！
      //-------------------------------------
      // 送信してきたユーザーに返信
      socket.emit('uploadedImage', path);
      // 接続している他のユーザーに送信
      socket.broadcast.emit('uploadedImage', path);
    });
  });

  //---------------------------
  // ルーム処理
  //---------------------------
  // ルーム（チャネル）に入る
  socket.on('join', () => {
    socket.join('roomA');
    console.log(socket);
  });

  // 指定したチャネルにJOINしているユーザーのみに送信
  socket.on('roomSend', (msg) => {
    // ルームに入っているひとすべて
    io.to('roomA').emit('roomASendMsg', msg);

    // ルームに入っている自分以外
    // socket.to('roomA').emit('roomASendMsg', msg);
  });

  // JOINしたルーム（roomA）から抜ける
  socket.on('leave', () => {
    socket.leave('roomA');
  });

});


